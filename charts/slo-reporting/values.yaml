---
#--------
## Configuration settings
##
config:
  #---
  ui:
    icons:
      favicon: /static/favico.png
      brand: /static/img/brand.png
    about:
      links:
        - name: colenio/slo-reporting
          url: https://github.com/colenio/slo-reporting
          icon: fa-brands fa-github
    slo:
      links:
        - name: Pyrra
          url: http://localhost:8080
          icon: "https://raw.githubusercontent.com/pyrra-dev/pyrra/main/ui/public/favicon.ico"
        - name: Prometheus
          url: http://localhost:9090
          icon: "https://raw.githubusercontent.com/prometheus/docs/main/static/favicon.ico"
    status:
      links:
        - name: Grafana
          url: http://localhost:3000
          icon: "https://raw.githubusercontent.com/grafana/grafana/main/public/img/fav32.png"
        - name: Alertmanager
          url: http://localhost:9093
          icon: "https://raw.githubusercontent.com/prometheus/alertmanager/main/ui/app/favicon.ico"

  #---
  metrics:
    # -- Should SLO reports be generated from configured SLOs
    enabled: true
    cronjob:
      # -- Should the export-metrics job be enabled
      enabled: true
      # -- The cronjob schedule for running the export-metrics job (default: nightly at 2AM)
      schedule: "@daily"

    prometheus:
      # -- Prometheus URL to query
      url: http://prometheus-community-kube-prometheus.observability:9090
    # -- Evaluation window for SLOs
    window: P30D # 1 month
    # -- In what granularity (step-size) should SLOs be reported
    step: P1D
    # -- List of SLOs to report on
    objectives:
      - name: "prometheus-uptime"
        # -- The goal of the SLO in percentage
        goal: 99.9 # 99.9% uptime, default
        # -- Prometheus query to evaluate
        query: 100 * avg(avg_over_time(up{job=~"prometheus.*"}[5m]))
      # -- [Pyrra](https://github.com/pyrra-dev/pyrra) Example, `slo` is the metric-label
      - name: "slo"
        query: 100 * pyrra_availability
        goal_query: 100 * pyrra_objective
    bucket:
      # -- Path to the archive file
      output: slo-reporting.csv
      # -- Mount path in pod
      path: /app/data
      # -- Type of bucket to use (azure, gcs, s3)
      type: azure
      # -- Azure File Share to store slo reports
      name: slo-reports
      # -- Name of pre-existing Secret for Azure Storage to use
      secretName: slo-reporting
  #---
  status:
    # -- Should a status API be created which aggregates alerts from multiple sources?
    enabled: true
    # -- Scrape interval of alert sources
    interval: PT1M
    # -- List of alert monitors to aggregate
    monitors:
      # -- List of Azure Monitors
      azure:
        # -- An example of an Azure monitor
        - name: azure-project-1
          # -- Azure Subscription ID
          subscription_id: XXXXXX-XXXX-XXXXXX-XXXX-XXXXXX
      # -- List of Prometheus Monitors
      prometheus:
        # -- An example of a Prometheus monitor
        - name: prometheus-project-1
          # -- Prometheus URL to query
          url: http://prometheus-operated.observability:9090
          # -- Prometheus query to evaluate
          query: 'ALERTS{alertstate="firing", severity="critical", relevance="health-status"}'
      # -- List of a Alertmanager Monitors
      alertmanager:
        # -- An example of an Alertmanager monitor
        - name: alertmanager-project1
          # -- Alertmanager URL to query
          url: http://alertmanager-operated.observability:9093/api/v2/alerts
          # -- List of filters to apply, cf. [AlertManager OpenAPI](https://github.com/prometheus/alertmanager/blob/main/api/v2/openapi.yaml)
          filters:
            - "receiver=email"
            - "severity=critical"
            - "relevance=health-status"
          active: True
          silenced: False
          inhibited: False
          unprocessed: False
#--------
image:
  # -- The image repository to pull from
  repository: ghcr.io/colenio/slo-reporting
  # -- Overrides the image tag whose default is the chart appVersion.
  tag: ""
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
podAnnotations: {}

serviceAccount:
  create: false
  annotations: {}
  name: ""

securityContext: {}
podSecurityContext: {}
env: {}
resources: {}

replicaCount: 1
autoscaling:
  # -- Enable auto scaling via [HPA](https://docs.microsoft.com/en-us/azure/aks/tutorial-kubernetes-scale#autoscale-pods)
  enabled: false
  minReplicas: 1
  maxReplicas: 4
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# -- Networking
service:
  port: 8000
  type: ClusterIP

ingress:
  ui:
    # -- Enable UI Ingress
    enabled: false
    className: "" # nginx
    annotations: {}
    hosts: []
    tls: []
  api:
    # -- Enable API Ingress
    enabled: false
    className: "" # nginx
    annotations: {}
    hosts: []
    tls: []

metrics:
  # -- Enable Prometheus metrics
  enabled: true
  serviceMonitor: # TODO: document
    # -- Enable a [ServiceMonitor](https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#servicemonitorspec)
    enabled: true
    namespace: ""
    additionalLabels: []
    scrapeInterval: 30s
    honorLabels: false
    relabelings: []
    metricRelabelings: []
    jobLabel: ""
    namespaceSelector: {}
    targetLabels: []
